<?php
/**
 * @file
 * A block module for user defined recurly
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function myrecurly_help($path, $arg) {
  switch ($path) {
    case "admin/help#myrecurly":
      return '<p>' . t("Displays user defined functionaly related to recurly.") . '</p>';
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function myrecurly_block_info() {
  $blocks['myrecurly'] = array(
    'info' => t('My Recurly'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 *
 */
function myrecurly_client_initialize($settings = null, $reset = false) {
  static $initialized = false;
  $client = null;

  // Skip the process if we're not setting up a new connection and we're already
  // set up with a configuration.
  if ($initialized && !$reset) {
    return true;
  }

  // If no settings array was given, use the default account settings.
  if (empty($settings)) {
    $settings = array(
      'api_key' => variable_get('recurly_api_key', ''),
      'subdomain' => variable_get('recurly_subdomain', ''),
      'private_key' => variable_get('recurly_private_key', ''),
    );
  }

  // If we can find a path in the libraries directory to the Recurly PHP client
  // library...
  $path = libraries_get_path('recurly');
  if (($path = libraries_get_path('recurly')) && file_exists($path . '/lib/recurly.php')) {
    // Include the library files and configure authentication.
    require_once $path . '/lib/recurly.php';

    // Required for the API
    Recurly_Client::$apiKey = $settings['api_key'];
    // Optional for Recurly.js:
    Recurly_js::$privateKey = $settings['private_key'];
  }
  else {
    watchdog('recurly', 'Could not find the Recurly PHP client library in sites/all/libraries/recurly.', array(), WATCHDOG_ERROR);
    return false;
  }

  $initialized = true;

  return true;
}

/**
 * Implemenets hook_menu()
 */
function myrecurly_menu() {
  $items = array();

  $items['admin/config/services/myrecurly'] = array(
    'title' => 'My Recurly',
	'description' => 'Configuration for My Recurly',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('myrecurly_form'),
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => 20,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
  );

  // Subscription listing
  $items['admin/config/services/myrecurly/subscriptions'] = array(
    'title' => 'List of Subscriptions',
	'description' => 'Configuration for My Recurly',
	'page callback' => 'myrecurly_list_subscriptions_page',
	'type' => MENU_LOCAL_TASK,
	//'type' => MENU_NORMAL_ITEM,
	'weight' => -10,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
  );

  // Account listing
  $items['admin/config/services/myrecurly/accounts'] = array(
    'title' => 'List of Accounts',
	'description' => 'Configuration for My Recurly',
	'page callback' => 'myrecurly_list_accounts_page',
	'type' => MENU_LOCAL_TASK,
	//'type' => MENU_NORMAL_ITEM,
	'weight' => -20,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
  );

  // Account listing
  $items['admin/config/services/myrecurly/close_account'] = array(
    'title' => 'Close Account',
	'description' => 'Close Account Subscription',
	'page callback' => 'myrecurly_close_account_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -30,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Edit Account
  $items['admin/config/services/myrecurly/edit_account'] = array(
    'title' => 'Edit Account',
	'description' => 'Edit Account',
	'page callback' => 'myrecurly_edit_account_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -40,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Re-Open Account
  $items['admin/config/services/myrecurly/reopen_account'] = array(
    'title' => 'Re-Open Account',
	'description' => 'Re-Open Account',
	'page callback' => 'myrecurly_reopen_account_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -100,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Cancel subscription
  $items['admin/config/services/myrecurly/cancel_subscription'] = array(
    'title' => 'Cancel Account',
	'description' => 'Configuration for My Recurly',
	'page callback' => 'myrecurly_cancel_subscription_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -50,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Re-Activate subscription
  $items['admin/config/services/myrecurly/reactivate_subscription'] = array(
    'title' => 'Reactivate Subscription',
	'description' => 'Re-Activate Subscription',
	'page callback' => 'myrecurly_reactivate_subscription_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -60,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Re-Activate subscription
  $items['admin/config/services/myrecurly/terminate_subscription'] = array(
    'title' => 'Termnate Subscription',
	'description' => 'Terminate Subscription',
	'page callback' => 'myrecurly_terminate_subscription_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -70,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Postpones subscription
  $items['admin/config/services/myrecurly/postpone_subscription'] = array(
    'title' => 'Postpone Subscription',
  'description' => 'Postpone Subscription',
  'page callback' => 'myrecurly_postpone_subscription_page',
  //'type' => MENU_LOCAL_TASK,
  'type' => MENU_NORMAL_ITEM,
  'weight' => -70,
  'access arguments' => array('administer my recurly'),
  'file' => 'includes/myrecurly.pages.inc',
  'hidden' => TRUE,
  );

  // Manage subscription
  $items['admin/config/services/myrecurly/manage_subscription'] = array(
    'title' => 'Manage Subscription',
	'description' => 'Manage My Recurly Subscription',
	'page callback' => 'myrecurly_manage_subscription_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -80,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  // Edit subscription
  $items['admin/config/services/myrecurly/edit_subscription'] = array(
    'title' => 'Edit Subscription',
	'description' => 'Edit My Recurly Subscription',
	'page callback' => 'myrecurly_edit_subscription_page',
	//'type' => MENU_LOCAL_TASK,
	'type' => MENU_NORMAL_ITEM,
	'weight' => -90,
	'access arguments' => array('administer my recurly'),
	'file' => 'includes/myrecurly.pages.inc',
	'hidden' => TRUE,
  );

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////// user section ////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  $items['user/%/mysubscription'] = array(
    'title' => 'My Subscriptions',
    'description' => 'Send e-mail to a user about improper site behavior.',
    //'page callback' => 'drupal_get_form',
    'page callback' => 'myrecurly_user_subscription_page',
    //'access callback' => 'user_access',
    //'page arguments' => array('user_warn_confirm_form', 1),
    //'access arguments' => array('administer users'),
    //'access arguments' => array('user', 1, 'main'),
    //'access arguments' => array('access user profiles'),
    'access arguments' => array('access content'), // WORKS
    //'type' => MENU_LOCAL_TASK,
    'type' => MENU_NORMAL_ITEM,
    //'file' => 'includes/myrecurly.pages.inc',
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  $items['user/%/reactivate_mysubscription'] = array(
    'title' => 'Reactivate My Subscription',
    'description' => 'Reactives cancelled subscription in user section',
    'page callback' => 'myrecurly_user_reactivate_subscription',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  $items['user/%/cancel_mysubscription'] = array(
    'title' => 'Cancels My Subscription',
    'description' => 'Cancels subscription in user section',
    'page callback' => 'myrecurly_user_cancel_subscription',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  $items['user/%/terminate_mysubscription'] = array(
    'title' => 'Terminates My Subscription',
    'description' => 'Terminates subscription in user section',
    'page callback' => 'myrecurly_user_terminate_subscription',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  $items['user/%/postpone_mysubscription'] = array(
    'title' => 'Postpones My Subscription',
    'description' => 'Postpones subscription in user section',
    'page callback' => 'myrecurly_user_postpone_subscription',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  $items['user/%/edit_mysubscription'] = array(
    'title' => 'Updates My Subscription',
    'description' => 'Updates subscription in user section',
    'page callback' => 'myrecurly_user_edit_subscription',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  // Account Information
  $items['user/%/myaccount'] = array(
    'title' => 'My Subscription\'s Account',
    'description' => 'Subscription\'s account information',
    'page callback' => 'myrecurly_user_account',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  // Edit Account
  $items['user/%/edit_myaccount'] = array(
    'title' => 'Edit Subscription\'s Account',
    'description' => 'Edit Subscription\'s account information',
    'page callback' => 'myrecurly_user_edit_account',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  // Close Account
  $items['user/%/close_myaccount'] = array(
    'title' => 'Close Subscription\'s Account',
    'description' => 'Close Subscription\'s account',
    'page callback' => 'myrecurly_user_close_account',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  // Reopen Account
  $items['user/%/reopen_myaccount'] = array(
    'title' => 'Reopen Subscription\'s Account',
    'description' => 'Reopen Subscription\'s account',
    'page callback' => 'myrecurly_user_reopen_account',
    'access arguments' => array('access content'), // WORKS
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/myrecurly.user.pages.inc',
  );

  // TODO
  // 'access callback' => 'user_is_logged_in', // to give access to registered user

  return $items;
}

/**
 * Implments hook_menu_alter
 */
function myrecurly_menu_alter(&$items) {
  //$items['admin/config/services/myrecurly/cancel_subscription']['type'] = MENU_SUGGESTED_ITEM; //MENU_CALLBACK;
  //$items['admin/config/services/myrecurly/close_account']['type'] = MENU_SUGGESTED_ITEM; //MENU_DEFAULT_LOCAL_TASK; //MENU_CALLBACK;
  //$items['admin/config/services/myrecurly/edit_account'] = MENU_CALLBACK;
  //$items['admin/config/services/myrecurly/manage_subscription'] = MENU_SUGGESTED_ITEM;
  //$items['admin/config/services/myrecurly/terminate_subscription'] = MENU_SUGGESTED_ITEM;
  //$items['admin/config/services/myrecurly/reactivate_subscription'] = MENU_SUGGESTED_ITEM;
}

/**
 *
 */
function myrecurly_breadcrumb($breadcrumb) {
  if (!empty($breadcrumb)) {
    $title = drupal_get_title();
    if (!empty($title)) {
      $breadcrumb[]=$title;
    }
    return '<div class="breadcrumb">'. implode(' › ', $breadcrumb) .'</div>';
  }
}

/**
 * Implements hook_permission().
 */
function myrecurly_permission() {
  $permissions = array(
    'administer my recurly' => array(
      'title' => t('Administer My Recurly'),
      'description' => t('Allows users to configure site-wide Recurly account settings and grants access to all integration activities.'),
      'restrict access' => TRUE,
    ),
    'manage recurly subscription' => array(
      'title' => t('Access My Recurly subscription pages'),
      'description' => t('Determines if users can see the "Subscription" tab on <em>any account on which they have also "edit" permission</em>. Should be applied to both both end-users managing their own subscriptions and administrators.'),
    ),
  );

  return $permissions;
}

/**
 * checks is there subscription product for a give order
 */
function myrecurly_is_subscription_product($order, &$form_state) {
  // Get line items object
  $commerce_line_items = $order->commerce_line_items;

  $subscription_products = array();
  foreach ($commerce_line_items['und'] as $key => $value) {
    // Get each line item
    $line_item = commerce_line_item_load($value['line_item_id']);

    // Get product_ids
    $product_ids_data = $line_item->data;
    $product_ids = array();

    if (isset($product_ids_data['context']['product_ids'])) {
      $product_ids = $product_ids_data['context']['product_ids'];
    //}
    //$product_ids = $product_ids_data['context']['product_ids'];

      $product = commerce_product_load($product_ids[0]);
      // Checks if the product is a subscription product
      if (isset($product->field_is_subscription)) {
        if ($product->field_is_subscription['und'][0]) {
          $subscribed_product = $product;
          array_push($subscription_products, $subscribed_product);
        } else {
          $is_subscription = false;
        }
      }
    }
  }

  return (!empty($subscription_products)) ? $subscription_products : false;

}

/**
 * checks if a given product in cart and email is already 
 * subscribed in recurly
 */
function myrecurly_subscription_product($order, &$form_state) {
  /*echo '<pre>form_state: ';
  echo 'xxx: ' .  $form_state['order']->mail;
  print_r($form_state);
  exit;*/

  $subscription_products = myrecurly_is_subscription_product($order, $form_state);

  if (!$subscription_products) {
    return;
  }

  $recurly_path = libraries_get_path('recurly');
  include ("{$recurly_path}/lib/recurly.php");

  $recurly_api_key = variable_get('recurly_api_key', '');
  Recurly_Client::$apiKey = $recurly_api_key;

  // Now we check, if $subscription_products and email combination is
  // already stored in recurly
  $found_subscription = false;
  foreach ($subscription_products as $key => $prod) {
    // Non logged user
    if (isset($form_state['values']['account'])) {
      $email_address = $form_state['values']['account']['login']['mail'];
    }
    // Logged user
    if (isset($form_state['order']->mail)) {
      $email_address = $form_state['order']->mail;
    }
    //$email_address = $form_state['values']['account']['login']['mail'];

    if (!empty($email_address)) {
      try {
        $subscription_lists = Recurly_SubscriptionList::getForAccount($email_address);

        foreach ($subscription_lists as $xkey => $recurly_subscription) {
          $plan_code = $recurly_subscription->plan->plan_code;
          $state = $recurly_subscription->state;
          // TODO - for canceled, it has to have different treatment
          if ($plan_code ==  $subscription_products[0]->sku && ($state == 'active' || $state == 'canceled')) {
            $found_subscription = true;
          }
        }
      } catch (Exception $e) {
        $found_subscription = false;
      }
    } 

    // Show the error if any
    if ($found_subscription) {
      drupal_set_message('Our system found that you already have subscription with this product "' . 
        $subscription_products[0]->title . '".', 'error');
      drupal_set_message('Please update your Bag.', 'error');
      break;
    }
  }

  return ($found_subscription) ? true : false;

}

/**
 * checks is there subscription product for a give order
 */
function myrecurly_create_subscription($order, &$form_state) {

  $subscription_products = myrecurly_is_subscription_product($order, $form_state);

  if (!$subscription_products) {
    return;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  $profile_id = $order_wrapper->commerce_customer_billing->profile_id->value();
  $profile = commerce_customer_profile_load($profile_id);
  $commerce_customer_address = $profile->commerce_customer_address;
  $billing_full_name = $commerce_customer_address['und']['0']['name_line'];
  list($billing_first_name, $billing_last_name) = explode(" ", $billing_full_name);
  $billing_address1 = $commerce_customer_address['und']['0']['thoroughfare'];
  $billing_address2 = $commerce_customer_address['und']['0']['premise'];
  $billing_city = $commerce_customer_address['und']['0']['locality'];
  $billing_state = $commerce_customer_address['und']['0']['administrative_area'];
  $billing_zipcode = $commerce_customer_address['und']['0']['postal_code'];
  $billing_country_code = 'US';

  $recurly_path = libraries_get_path('recurly');
  include ("{$recurly_path}/lib/recurly.php");

  foreach ($subscription_products as $key => $subscribed_products) {
    $ar_plan_code = $subscribed_products->field_plan_code;
    $plan_code = $ar_plan_code['und'][0]['value'];
  }

  $recurly_api_key = variable_get('recurly_api_key', '');
  Recurly_Client::$apiKey = $recurly_api_key;

  $subscription = new Recurly_Subscription();

  // Starts recurly variables initialization
  $default_subscription_currency = 'USD';

  $subscription->plan_code = $plan_code;
  $subscription->currency = $default_subscription_currency;
  $subscription->quantity = count($subscription_products);
  //$subscription->quantity = $form_state['values']['quantity'];
  // Make sure we bill them at fat tuesday
  $isTuesday = date('l'); // Lower case 'L'
  if ($isTuesday == 'Tuesday') {
    $starts_at = date('Y-m-d');
  } else {
    $starts_at = date('Y-m-d', strtotime('next tuesday'));
  }
  $subscription->starts_at = date('c', strtotime($starts_at));

  $account = new Recurly_Account();
  $account->account_code = (string)$order->mail;
  $account->email = (string)$order->mail;
  $account->first_name = $billing_first_name;
  $account->last_name = $billing_last_name;

  $billing_info = new Recurly_BillingInfo();
  $billing_info->first_name = $billing_first_name;
  $billing_info->last_name = $billing_last_name;
  $billing_info->address1 = $billing_address1;
  $billing_info->address2 = $billing_address2;
  $billing_info->city = $billing_city;
  $billing_info->state = $billing_state;
  $billing_info->zip = $billing_zipcode;
  $billing_info->country = $billing_country_code;
  $cc_number = $form_state['input']['commerce_payment']['payment_details']['credit_card']['number'];
  $cc_exp_month = $form_state['input']['commerce_payment']['payment_details']['credit_card']['exp_month'];
  $cc_exp_year = $form_state['input']['commerce_payment']['payment_details']['credit_card']['exp_year'];
  $billing_info->number = $cc_number;
  $billing_info->month = $cc_exp_month;
  $billing_info->year = $cc_exp_year;
  //$billing_info->phone = $form_state['values']['billing_phone_number'];
  $billing_info->ip_address = $_SERVER['REMOTE_ADDR'];

  $account->billing_info = $billing_info;
  $subscription->account = $account;

  $subscription->create();

}

/**
 * Format a price for display.
 */
function myrecurly_format_currency($price_in_cents, $currency, $html = FALSE) {
  $currencies = recurly_currency_list();
  $currency_info = isset($currencies[$currency]) ? $currencies[$currency] : array('', ' ' . $currency);
  $prefix = $currency_info[0] ? $currency_info[0] : '';
  $suffix = $currency_info[1] ? $currency_info[1] : '';
  $thousands_separator = isset($currency_info[2]) ? $currency_info[2] : ',';
  $decimal_separator = isset($currency_info[3]) ? $currency_info[3] : '.';
  $decimals = isset($currency_info[4]) ? $currency_info[4] : 2;
  $rounding_step = isset($currency_info[5]) ? $currency_info[5] : NULL;

  // Commerce module provides a more flexible and complete currency formatter.
  if (module_exists('commerce')) {
    $formatted = commerce_currency_format($price_in_cents, $currency, NULL, TRUE);
  }
  else {
    // Convert to a decimal amount.
    $float = $price_in_cents/100;

    // Round the amount if necessary i.e. Francs round up to the nearest 0.05.
    if ($rounding_step) {
      $modifier = 1 / $rounding_step;
      $float = round($float * $modifier) / $modifier;
    }

    // Format the number.
    $formatted = $prefix . number_format($float, $decimals, $decimal_separator, $thousands_separator) . $suffix;
  }

  // Wrap each part in HTML if requested.
  if ($html) {
    $amount_string = '';
    $amount_array = array();
    preg_match('/([^0-9]*)?([0-9' . preg_quote($thousands_separator) . ']+)([0-9' . preg_quote($decimal_separator) . ']+)(.*)?/', $formatted, $amount_array);
    if ($amount_array[1]) {
      $amount_string .= '<span class="currency-prefix">' . $amount_array[1] . '</span>';
    }
    if ($amount_array[2]) {
      $amount_string .= '<span class="currency-dollars">' . $amount_array[2] . '</span>';
    }
    if ($amount_array[3]) {
      $amount_string .= '<span class="currency-cents">' . $amount_array[3] . '</span>';
    }
    if ($amount_array[4]) {
      $amount_string .= '<span class="currency-suffix">' . $amount_array[4] . '</span>';
    }
    $formatted = $amount_string;
  }

  return $formatted;
}