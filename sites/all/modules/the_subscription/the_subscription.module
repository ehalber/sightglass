<?php
/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

//global $user;

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function the_subscription_help($path, $arg) {
  switch ($path) {
    case "admin/help#the_subscription":
      return '<p>' . t("Displays links to nodes created on this date") . '</p>';
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function the_subscription_block_info() {
  $blocks['the_subscription'] = array(
    'info' => t('Subscribe'), //The name that will appear in the block list.
    //'cache' => DRUPAL_CACHE_PER_ROLE, //Default
      'cache' => DRUPAL_NO_CACHE,

  );
  return $blocks;
}

function the_subscription_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['the_subscription_message_pane'] = array(
    'title' => t('Message Example'),
    'base' => 'commerce_message_pane', // <== That's all that is needed
  );

  return $checkout_panes;
}

/**
 * Implements hook_block_view()
 */
function the_subscription_block_view($delta = '') {
  /* // If we are using page from recurly, this is the handling redirect
  if (isset($_GET['account_code'])) {
    $account_code = drupal_get_path_alias($_GET['account_code']);
    dpm($account_code);
  }
  */

	$block = array();

	switch($delta){
    	case 'the_subscription':
    		$block['subject'] = t('Subscribe');
    		$block['content'] = '';
   			break;
   	}

   	return $block;
}

/**
 * Implements hook_menu().
 */
function the_subscription_menu() {
  $items = array();

  $items['the_subscription'] = array(
    'title' => 'Subscribe',
    'description' => 'Configuration for The Subscription module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('the_subscription_form'),
    //'access arguments' => array('access administration pages'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Current posts settings
 *
 * @see the_subscription_menu()
 */
function the_subscription_form($form, &$form_state) {

  $form['#attached']['css'][drupal_get_path('module', 'the_subscription') . '/sub_form.css'] = array();

  $form['the_subscription'] = array(
    '#action' => '#',
    'the_subscription' => array(
      '#type' => 'select',
      '#title' => t('Your Subscription Selection'),
      '#options' => array(
        '' => 'Please Select One...',
        'owls_howl_espresso' => t('Owl\'s Howl Espresso Subscription'),
        'seasonal_variety' => t('Seasonal Variety Subscription'),
      ),
      '#default_value' => variable_get('#', TRUE),
      '#required' => TRUE,
    )
  );
  
  $form['subscription_type'] = array(
    '#type' => 'radios',
    '#title' => t('I\'d like to receive coffee'),
    '#options' => array(
      'once_a_week' => t('Once a Week'),
      'twice_a_week' => t('Every other Week'),
      'thrice_a_week' => t('Every 3 Weeks'),
      'once_a_month' => t('Once a Month')
    ),
    '#required' => TRUE,
  );

  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#size' => 2,
    '#required' => TRUE,
  );

  $form['contact_information'] = array(
    '#type' => 'item',
    '#title' => t('Contact Information'),
    '#prefix' => '<div style="font-size:20px;">',
    '#suffix' => '</div>',
  );

  $form['name'] = array(
    '#type' => 'fieldset',
    '#title' => t('Name'),
    // Make the fieldset collapsible.
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
  $form['name'] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
  );
    
  // Make these fields required.
  $form['name']['first'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#prefix' => '<div class="col1 name first">',
    '#suffix' => '</div>',
    '#required' => TRUE, // Added
  );

  $form['name']['last'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#prefix' => '<div class="col1 name">',
    '#suffix' => '</div>',
    '#required' => TRUE, // Added
  );

  $form['e_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-Mail'),
    '#required' => TRUE,
  );

  /////////////////////////////////////////////////////////////////////
  // BILLING INFORMATION
  $form['billing_information'] = array(
    '#type' => 'item',
    '#title' => t('Billing Information'),
    '#prefix' => '<div style="font-size:20px;">',
    '#suffix' => '</div>',
  );

  $form['billing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing'),
    // Make the fieldset collapsible.
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  $form['billing'] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
  );

  $form['billing']['cc_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Credit Card Number'),
      '#size' => 40,
      '#attributes' => array('autocomplete' =>'off'),
      '#prefix' => '<div class="col1">',
      '#suffix' => '</div>',
      '#required' => TRUE,
  );

  $form['billing']['cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('CVV'),
    '#size' => 4,
    '#attributes' => array('autocomplete' =>'off'),
    '#prefix' => '<div class="col1">',
    '#suffix' => '</div>',
    '#required' => TRUE, // Added
  );

  $cc_default = Date('Now');

  $form['cc_exp'] = array(
    '#type' => 'date_select',
    '#title' => t('Credit Card Expiration'),
    //'#title_display' => 'invisible',
    '#date_format' => 'm-Y',
    '#default_value' => $cc_default,
    '#date_year_range' => '0:+15',
    '#size' => 40,
    //'#attributes' => array('title' => t('Enter your CC expiration')),
    '#date_label_position' => 'within',
    '#required' => TRUE,
  );

  $form['billing_address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 1'),
    '#required' => TRUE,
  );

  $form['billing_address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 2'),
    '#required' => FALSE,
  );

  $form['billing_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#required' => TRUE,
  );

  $form['bil_state_zip'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing'),
    // Make the fieldset collapsible.
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  $form['bil_state_zip'] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
  );

  $form['bil_state_zip']['billing_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 40,
    '#prefix' => '<div class="col1">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );

  $form['bil_state_zip']['billing_zipcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 12,
    '#prefix' => '<div class="col1">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );
  
  $form['billing_country_code'] = array(
    //'#type' => 'textfield',
    '#type' => 'select',
    '#options' => list_countries(),
    '#default_value' => 'US',
    '#title' => t('Country Code'),
    '#required' => TRUE,
  );

  //$path = drupal_get_path('theme', 'the_subscription');
  $path = drupal_get_path('module', 'the_subscription');
  $form['billing_shipping'] = array(
    '#type' => 'checkbox',
    '#title' => t('Billing address the same as shipping address'),
    '#id' => 'use-billing',
    //'#weight' => -100,
    '#attached' => array(
      'library' => array(array('system', 'ui.accordion')),
      'js' => array("$path/js/toggle.js"),
      'css' => array(
        "$path/css/jquery.ui.accordion.css",
        "$path/css/commerce_checkout.css",
      ),
    )
  );

  /////////////////////////////////////////////////////////////////////
  // SHIPPING INFORMATION
  $form['shipping_information'] = array(
    '#type' => 'item',
    '#title' => t('Shipping Information'),
    '#prefix' => '<div style="font-size:20px;">',
    '#suffix' => '</div>',
  );

  $form['shipping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shipping'),
    // Make the fieldset collapsible.
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  $form['shipping'] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
  );

  $form['shipping_address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 1'),
    '#required' => TRUE,
  );

  $form['shipping_address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 2'),
    '#required' => FALSE,
  );

  $form['shipping_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#required' => TRUE,
  );

  $form['ship_state_zip'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shipping'),
    // Make the fieldset collapsible.
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  $form['ship_state_zip'] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
  );

  $form['ship_state_zip']['shipping_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 40,
    '#prefix' => '<div class="col1">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );

  $form['ship_state_zip']['shipping_zipcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 12,
    '#prefix' => '<div class="col1">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );
  
  $form['shipping_country_code'] = array(
    //'#type' => 'textfield',
    '#type' => 'select',
    '#options' => list_countries(),
    '#default_value' => 'US',
    '#title' => t('Country Code'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function the_subscription_form_validate($form, &$form_state) {

  if ($form_state['values']['billing_shipping']) {
    if (strcasecmp($form_state['values']['billing_address1'], $form_state['values']['shipping_address1']) != 0) {
      form_set_error('error1', 'Billing address1 is different with Shipping address1.');
    }
    if (strcasecmp($form_state['values']['billing_address2'], $form_state['values']['shipping_address2']) != 0) {
      form_set_error('error2', 'Billing address2 is different with Shipping address2.');
    }
    if (strcasecmp($form_state['values']['billing_city'], $form_state['values']['shipping_city']) != 0) {
      form_set_error('error3', 'Billing city is different with Shipping city.');
    }
    if (strcasecmp($form_state['values']['billing_state'], $form_state['values']['shipping_state']) != 0) {
      form_set_error('error4', 'Billing stage is different with Shipping state.');
    }
    if (strcasecmp($form_state['values']['billing_zipcode'], $form_state['values']['shipping_zipcode']) != 0) {
      form_set_error('error5', 'Billing zip code is different with Shipping zip code.');
    }
    if (strcasecmp($form_state['values']['billing_country_code'], $form_state['values']['shipping_country_code']) != 0) {
      form_set_error('error6', 'Billing country code is different with Shipping country code.');
    }
  }
  if (!is_numeric($form_state['values']['quantity'])) {
    form_set_error('error7', 'Quantity has to be a number.');
  }
  if ($form_state['values']['quantity'] <= 0) {
    form_set_error('error8', 'Subscription quantity has to be greater than zero.');
  }
}

/**
 * Implements hook_form_submit().
 */
function the_subscription_form_submit($form, &$form_state) {

  global $user;

  $the_subscription = $form_state['values']['the_subscription'];
  $subscription_type = $form_state['values']['subscription_type'];

  try {

    $recurly_path = libraries_get_path('recurly');
    include ("{$recurly_path}/lib/recurly.php");

    Recurly_Client::$apiKey = 'f16643f607e34cbebbf589f7e3b532fd';

    $subscription = new Recurly_Subscription();

    switch ($the_subscription) {
      case 'owls_howl_espresso':
        switch ($subscription_type) {
          case 'once_a_week':
            $plan_code = 'owls-howl-7';
            // drupal_goto('https://etc.recurly.com/subscribe/owls-howl-7', 
            //   array('external' => TRUE));
            break;
          case 'twice_a_week':
            $plan_code = 'owls-howl-14';
            // drupal_goto('https://etc.recurly.com/subscribe/owls-howl-14', 
            //   array('external' => TRUE));
            break;
          case 'thrice_a_week':
            $plan_code = 'owls-howl-21';
            break;
          case 'once_a_month':
            $plan_code = 'owls-howl-30';
            // drupal_goto('https://etc.recurly.com/subscribe/owls-howl-30', 
            //   array('external' => TRUE));
            break;
          default:
            throw new Exception("Error Processing Request", 1);
            break;
        }
        break;

      case 'seasonal_variety':
        switch ($subscription_type) {
          case 'once_a_week':
            $plan_code = 'seasonal-variety-7';
            // drupal_goto('https://etc.recurly.com/subscribe/seasonal-variety-7', 
            //   array('external' => TRUE));
            break;
          case 'twice_a_week':
            $plan_code = 'seasonal-variety-14';
            // drupal_goto('https://etc.recurly.com/subscribe/seasonal-variety-14', 
            //   array('external' => TRUE));
            break;
          case 'thrice_a_week':
            $plan_code = 'seasonal-variety-21';
            break;
          case 'once_a_month':
            $plan_code = 'seasonal-variety-30';
            // drupal_goto('https://etc.recurly.com/subscribe/seasonal-variety-30', 
            //   array('external' => TRUE));
            break;
          default:
            throw new Exception("Error Processing Request", 1);
            break;
        }
      
      default:
        # code...
        break;
    }

    $default_subscription_currency = 'USD';

    $subscription->plan_code = $plan_code;
    $subscription->currency = $default_subscription_currency;
    $subscription->quantity = $form_state['values']['quantity'];
    // Make sure we bill them at fat tuesday
    $isTuesday = date('l'); // Lower case 'L'
    if ($isTuesday == 'Tuesday') {
      $starts_at = date('Y-m-d');
    } else {
      $starts_at = date('Y-m-d', strtotime('next tuesday'));
    }
    $subscription->starts_at = $starts_at;

    $account = new Recurly_Account();
    $account->account_code = $form_state['values']['e_mail'];;
    $account->email = $form_state['values']['e_mail'];
    $account->first_name = $form_state['values']['first'];
    $account->last_name = $form_state['values']['last'];

    $billing_info = new Recurly_BillingInfo();
    $billing_info->first_name = $form_state['values']['first'];
    $billing_info->last_name = $form_state['values']['last'];
    $billing_info->address1 = $form_state['values']['billing_address1'];
    $billing_info->address2 = $form_state['values']['billing_address2'];
    $billing_info->city = $form_state['values']['billing_city'];
    $billing_info->state = $form_state['values']['billing_state'];
    $billing_info->zip = $form_state['values']['billing_zipcode'];
    $billing_info->country = $form_state['values']['billing_country_code'];
    $billing_info->number = $form_state['values']['cc_number'];
    $billing_info->month = $form_state['input']['cc_exp']['month'];
    $billing_info->year = $form_state['input']['cc_exp']['year'];

    $account->billing_info = $billing_info;
    $subscription->account = $account;

    $subscription->create();

    /////////////////////////////////////////////////////////////////
    // COMMERCE TABLES
    /////////////////////////////////////////////////////////////////
    
    $account = $user->uid;

    /////////////////////////////////////////////////////////////////
    // BILLING INFORMATION
    /////////////////////////////////////////////////////////////////
    //$type = $profile['type'];
    $type = 'billing';
    $country = $form_state['values']['billing_country_code'];
    $administrative_area = $form_state['values']['billing_state'];
    $sub_administrative_area = NULL;
    $locality = $form_state['values']['billing_city'];
    $dependent_locality = NULL;
    $postal_code = $form_state['values']['billing_zipcode'];
    $thoroughfare = $form_state['values']['billing_address1'];
    $premise = (!empty($form_state['values']['billing_address2']) ? 
      $form_state['values']['billing_address2'] : NULL);
    //$sub_premise = NULL;
    $organisation = NULL;
    $first_name = $form_state['values']['first'];
    $last_name = $form_state['values']['last'];
    $name_line = $first_name . ' ' . $last_name;
    //$phone = $profile['phone'];

    $new_profile = commerce_customer_profile_new($type);

    $wrapper = entity_metadata_wrapper('commerce_customer_profile', $new_profile);

    $wrapper->uid = $account;
    $wrapper->commerce_customer_address->country = $country;
    $wrapper->commerce_customer_address->administrative_area = $administrative_area;
    $wrapper->commerce_customer_address->sub_administrative_area = $sub_administrative_area;
    $wrapper->commerce_customer_address->locality = $locality;
    $wrapper->commerce_customer_address->dependent_locality = $dependent_locality;
    $wrapper->commerce_customer_address->postal_code = $postal_code;
    $wrapper->commerce_customer_address->thoroughfare = $thoroughfare;
    $wrapper->commerce_customer_address->premise = $premise;
    //$wrapper->commerce_customer_address->sub_premise = $sub_premise;
    $wrapper->commerce_customer_address->organisation_name = $organisation;
    $wrapper->commerce_customer_address->name_line = $name_line;
    $wrapper->commerce_customer_address->first_name = $first_name;
    $wrapper->commerce_customer_address->last_name = $last_name;
    //$wrapper->field_bcg_customer_phone = $phone;

    commerce_customer_profile_save($new_profile);

    /////////////////////////////////////////////////////////////////
    // SHIPPING INFORMATION
    /////////////////////////////////////////////////////////////////
    $type = 'shipping';
    $country = $form_state['values']['shipping_country_code'];
    $administrative_area = $form_state['values']['shipping_state'];
    $sub_administrative_area = NULL;
    $locality = $form_state['values']['shipping_city'];
    $dependent_locality = NULL;
    $postal_code = $form_state['values']['shipping_zipcode'];
    $thoroughfare = $form_state['values']['shipping_address1'];
    $premise = (!empty($form_state['values']['shipping_address2']) ? 
      $form_state['values']['shipping_address2'] : NULL);
    //$sub_premise = NULL;
    $organisation = NULL;
    $first_name = $form_state['values']['first'];
    $last_name = $form_state['values']['last'];
    $name_line = $first_name . ' ' . $last_name;
    //$phone = $profile['phone'];

    $new_profile = commerce_customer_profile_new($type);

    $wrapper = entity_metadata_wrapper('commerce_customer_profile', $new_profile);

    $wrapper->uid = $account;
    $wrapper->commerce_customer_address->country = $country;
    $wrapper->commerce_customer_address->administrative_area = $administrative_area;
    $wrapper->commerce_customer_address->sub_administrative_area = $sub_administrative_area;
    $wrapper->commerce_customer_address->locality = $locality;
    $wrapper->commerce_customer_address->dependent_locality = $dependent_locality;
    $wrapper->commerce_customer_address->postal_code = $postal_code;
    $wrapper->commerce_customer_address->thoroughfare = $thoroughfare;
    $wrapper->commerce_customer_address->premise = $premise;
    //$wrapper->commerce_customer_address->sub_premise = $sub_premise;
    $wrapper->commerce_customer_address->organisation_name = $organisation;
    $wrapper->commerce_customer_address->name_line = $name_line;
    $wrapper->commerce_customer_address->first_name = $first_name;
    $wrapper->commerce_customer_address->last_name = $last_name;
    //$wrapper->field_bcg_customer_phone = $phone;

    commerce_customer_profile_save($new_profile);

    drupal_set_message(t('Your subscription was created successfully.'));

  } catch (Exception $e) {
    
    switch(get_class($e)){
      case 'Recurly_NotFoundError':
        drupal_set_message('Record could not be found', 'error');
      case 'Recurly_ValidationError':
        //if there are multiple errors, they are comma delimited
        /*$messages = explode(',',$e->getMessage()); 
        foreach($messages as $message){
          print $message . "\n";
        }*/
        drupal_set_message($e->getMessage(), 'error');
        break;
      case 'Recurly_ServerError':
        drupal_set_message('Problem communicating with Recurly', 'error');
      default:
        drupal_set_message(get_class($e) . ': ' . $e->getMessage(), 'error');
    }
    $form_state['redirect'] = FALSE;
  }
}

/**
 * Implements  hook_form_alter
 */
function the_subscription_form_alterx(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'the_subscription_form':
          $form['#submit'][] = 'the_subscription_submit';
      break;
  }
}

/**
  * redirect page after successful submission
  */
function the_subscription_form_submitx($form, &$form_state) {
  $form_state['redirect'] = 'node/subscription-thank-you';
}

/**
 * Lists of available countries
 */
function list_countries() {

  $array = array(
    "AF" => "Afghanistan",
    "AL" => "Albania",
    "DZ" => "Algeria",
    "AS" => "American Samoa",
    "AD" => "Andorra",
    "AO" => "Angola",
    "AI" => "Anguilla",
    "AQ" => "Antarctica",
    "AG" => "Antigua and Barbuda",
    "AR" => "Argentina",
    "AM" => "Armenia",
    "AW" => "Aruba",
    "AC" => "Ascension Island",
    "AU" => "Australia",
    "AT" => "Austria",
    "AZ" => "Azerbaijan",
    "BS" => "Bahamas",
    "BH" => "Bahrain",
    "BD" => "Bangladesh",
    "BB" => "Barbados",
    "BY" => "Belarus",
    "BE" => "Belgium",
    "BZ" => "Belize",
    "BJ" => "Benin",
    "BM" => "Bermuda",
    "BT" => "Bhutan",
    "BO" => "Bolivia",
    "BA" => "Bosnia and Herzegovina",
    "BW" => "Botswana",
    "BV" => "Bouvet Island",
    "BR" => "Brazil",
    "BQ" => "British Antarctic Territory",
    "IO" => "British Indian Ocean Territory",
    "VG" => "British Virgin Islands",
    "BN" => "Brunei",
    "BG" => "Bulgaria",
    "BF" => "Burkina Faso",
    "BI" => "Burundi",
    "KH" => "Cambodia",
    "CM" => "Cameroon",
    "CA" => "Canada",
    "IC" => "Canary Islands",
    "CT" => "Canton and Enderbury Islands",
    "CV" => "Cape Verde",
    "KY" => "Cayman Islands",
    "CF" => "Central African Republic",
    "EA" => "Ceuta and Melilla",
    "TD" => "Chad",
    "CL" => "Chile",
    "CN" => "China",
    "CX" => "Christmas Island",
    "CP" => "Clipperton Island",
    "CC" => "Cocos [Keeling] Islands",
    "CO" => "Colombia",
    "KM" => "Comoros",
    "CD" => "Congo [DRC]",
    "CG" => "Congo [Republic]",
    "CK" => "Cook Islands",
    "CR" => "Costa Rica",
    "HR" => "Croatia",
    "CU" => "Cuba",
    "CY" => "Cyprus",
    "CZ" => "Czech Republic",
    "DK" => "Denmark",
    "DG" => "Diego Garcia",
    "DJ" => "Djibouti",
    "DM" => "Dominica",
    "DO" => "Dominican Republic",
    "NQ" => "Dronning Maud Land",
    "TL" => "East Timor",
    "EC" => "Ecuador",
    "EG" => "Egypt",
    "SV" => "El Salvador",
    "GQ" => "Equatorial Guinea",
    "ER" => "Eritrea",
    "EE" => "Estonia",
    "ET" => "Ethiopia",
    "FK" => "Falkland Islands [Islas Malvinas]",
    "FO" => "Faroe Islands",
    "FJ" => "Fiji",
    "FI" => "Finland",
    "FR" => "France",
    "GF" => "French Guiana",
    "PF" => "French Polynesia",
    "TF" => "French Southern Territories",
    "FQ" => "French Southern and Antarctic Territories",
    "GA" => "Gabon",
    "GM" => "Gambia",
    "GE" => "Georgia",
    "DE" => "Germany",
    "GH" => "Ghana",
    "GI" => "Gibraltar",
    "GR" => "Greece",
    "GL" => "Greenland",
    "GD" => "Grenada",
    "GP" => "Guadeloupe",
    "GU" => "Guam",
    "GT" => "Guatemala",
    "GG" => "Guernsey",
    "GN" => "Guinea",
    "GW" => "Guinea-Bissau",
    "GY" => "Guyana",
    "HT" => "Haiti",
    "HM" => "Heard Island and McDonald Islands",
    "HN" => "Honduras",
    "HK" => "Hong Kong",
    "HU" => "Hungary",
    "IS" => "Iceland",
    "IN" => "India",
    "ID" => "Indonesia",
    "IR" => "Iran",
    "IQ" => "Iraq",
    "IE" => "Ireland",
    "IM" => "Isle of Man",
    "IL" => "Israel",
    "IT" => "Italy",
    "CI" => "Ivory Coast",
    "JM" => "Jamaica",
    "JP" => "Japan",
    "JE" => "Jersey",
    "JT" => "Johnston Island",
    "JO" => "Jordan",
    "KZ" => "Kazakhstan",
    "KE" => "Kenya",
    "KI" => "Kiribati",
    "KW" => "Kuwait",
    "KG" => "Kyrgyzstan",
    "LA" => "Laos",
    "LV" => "Latvia",
    "LB" => "Lebanon",
    "LS" => "Lesotho",
    "LR" => "Liberia",
    "LY" => "Libya",
    "LI" => "Liechtenstein",
    "LT" => "Lithuania",
    "LU" => "Luxembourg",
    "MO" => "Macau",
    "MK" => "Macedonia [FYROM]",
    "MG" => "Madagascar",
    "MW" => "Malawi",
    "MY" => "Malaysia",
    "MV" => "Maldives",
    "ML" => "Mali",
    "MT" => "Malta",
    "MH" => "Marshall Islands",
    "MQ" => "Martinique",
    "MR" => "Mauritania",
    "MU" => "Mauritius",
    "YT" => "Mayotte",
    "FX" => "Metropolitan France",
    "MX" => "Mexico",
    "FM" => "Micronesia",
    "MI" => "Midway Islands",
    "MD" => "Moldova",
    "MC" => "Monaco",
    "MN" => "Mongolia",
    "ME" => "Montenegro",
    "MS" => "Montserrat",
    "MA" => "Morocco",
    "MZ" => "Mozambique",
    "MM" => "Myanmar [Burma]",
    "NA" => "Namibia",
    "NR" => "Nauru",
    "NP" => "Nepal",
    "NL" => "Netherlands",
    "AN" => "Netherlands Antilles",
    "NT" => "Neutral Zone",
    "NC" => "New Caledonia",
    "NZ" => "New Zealand",
    "NI" => "Nicaragua",
    "NE" => "Niger",
    "NG" => "Nigeria",
    "NU" => "Niue",
    "NF" => "Norfolk Island",
    "KP" => "North Korea",
    "VD" => "North Vietnam",
    "MP" => "Northern Mariana Islands",
    "NO" => "Norway",
    "OM" => "Oman",
    "QO" => "Outlying Oceania",
    "PC" => "Pacific Islands Trust Territory",
    "PK" => "Pakistan",
    "PW" => "Palau",
    "PS" => "Palestinian Territories",
    "PA" => "Panama",
    "PZ" => "Panama Canal Zone",
    "PG" => "Papua New Guinea",
    "PY" => "Paraguay",
    "YD" => "People&#x27;s Democratic Republic of Yemen",
    "PE" => "Peru",
    "PH" => "Philippines",
    "PN" => "Pitcairn Islands",
    "PL" => "Poland",
    "PT" => "Portugal",
    "PR" => "Puerto Rico",
    "QA" => "Qatar",
    "RO" => "Romania",
    "RU" => "Russia",
    "RW" => "Rwanda",
    "RE" => "Réunion",
    "BL" => "Saint Barthélemy",
    "SH" => "Saint Helena",
    "KN" => "Saint Kitts and Nevis",
    "LC" => "Saint Lucia",
    "MF" => "Saint Martin",
    "PM" => "Saint Pierre and Miquelon",
    "VC" => "Saint Vincent and the Grenadines",
    "WS" => "Samoa",
    "SM" => "San Marino",
    "SA" => "Saudi Arabia",
    "SN" => "Senegal",
    "RS" => "Serbia",
    "CS" => "Serbia and Montenegro",
    "SC" => "Seychelles",
    "SL" => "Sierra Leone",
    "SG" => "Singapore",
    "SK" => "Slovakia",
    "SI" => "Slovenia",
    "SB" => "Solomon Islands",
    "SO" => "Somalia",
    "ZA" => "South Africa",
    "GS" => "South Georgia and the South Sandwich Islands",
    "KR" => "South Korea",
    "ES" => "Spain",
    "LK" => "Sri Lanka",
    "SD" => "Sudan",
    "SR" => "Suriname",
    "SJ" => "Svalbard and Jan Mayen",
    "SZ" => "Swaziland",
    "SE" => "Sweden",
    "CH" => "Switzerland",
    "SY" => "Syria",
    "ST" => "São Tomé and Príncipe",
    "TW" => "Taiwan",
    "TJ" => "Tajikistan",
    "TZ" => "Tanzania",
    "TH" => "Thailand",
    "TG" => "Togo",
    "TK" => "Tokelau",
    "TO" => "Tonga",
    "TT" => "Trinidad and Tobago",
    "TA" => "Tristan da Cunha",
    "TN" => "Tunisia",
    "TR" => "Turkey",
    "TM" => "Turkmenistan",
    "TC" => "Turks and Caicos Islands",
    "TV" => "Tuvalu",
    "UM" => "U.S. Minor Outlying Islands",
    "PU" => "U.S. Miscellaneous Pacific Islands",
    "VI" => "U.S. Virgin Islands",
    "UG" => "Uganda",
    "UA" => "Ukraine",
    "AE" => "United Arab Emirates",
    "GB" => "United Kingdom",
    "US" => "United States",
    "UY" => "Uruguay",
    "UZ" => "Uzbekistan",
    "VU" => "Vanuatu",
    "VA" => "Vatican City",
    "VE" => "Venezuela",
    "VN" => "Vietnam",
    "WK" => "Wake Island",
    "WF" => "Wallis and Futuna",
    "EH" => "Western Sahara",
    "YE" => "Yemen",
    "ZM" => "Zambia",
    "ZW" => "Zimbabwe",
    "AX" => "Åland Islands",
  );

  return $array;
}